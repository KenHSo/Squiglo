@page "/"
@inject IHttpClientFactory HttpClientFactory
@rendermode InteractiveServer
@using Squiglo.Shared.Models

<PageTitle>Home - Squiglo</PageTitle>

<div class="container">
    <div class="feed">
        @if (IsLoading)
        {
            <p>Loading posts...</p>
        }
        else if (Posts.Count == 0)
        {
            <p>No posts yet. Be the first!</p>
        }
        else
        {
            @foreach (var post in Posts)
            {
                <div class="post">
                    <strong>@post.Content</strong>
                    <br />
                    <small>@post.CreatedAt.ToLocalTime()</small>
                    <hr />
                </div>
            }
        }
    </div>
</div>

<!-- post input box -->
<div class="post-box">
    <textarea @bind="NewPostContent" class="form-control" placeholder="What's on your mind?" maxlength="250"></textarea>
    <button class="btn btn-primary mt-2 w-50" @onclick="SubmitPost">Post</button>
</div>



@code {
    private string NewPostContent = string.Empty;
    private List<PostDTO> Posts = new();
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        // Allow the UI to render first, then fetch posts in the background
        _ = LoadPosts();

        //await LoadPosts();
    }

    private async Task LoadPosts()
    {
        var client = HttpClientFactory.CreateClient("SquigloAPI");
        Posts = await client.GetFromJsonAsync<List<PostDTO>>("/api/posts") ?? new List<PostDTO>();

        IsLoading = false; // Make sure loading state is updated
        StateHasChanged(); // Force UI update
    }

    private async Task SubmitPost()
    {
        if (string.IsNullOrWhiteSpace(NewPostContent)) return;

        var client = HttpClientFactory.CreateClient("SquigloAPI");
        var newPost = new PostDTO
            {
                Content = NewPostContent,
                CreatedAt = DateTime.UtcNow
            };

        var response = await client.PostAsJsonAsync("/api/posts", newPost);
        if (response.IsSuccessStatusCode)
        {
            NewPostContent = string.Empty;
            await LoadPosts(); // Refresh the feed
        }
    }
}